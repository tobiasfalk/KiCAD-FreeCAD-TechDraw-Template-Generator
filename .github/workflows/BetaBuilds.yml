# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Beta Builds

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl] # , clang
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt (Windows — MSVC 2022)
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.10.0
          arch: win64_msvc2022_64

      - name: Install Qt (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.10.0
          arch: linux_gcc_64

      #- name: doxygen-install
      #  if: matrix.os == 'ubuntu-latest'
      #  # You may pin to the exact commit or the version.
      #  uses: ssciwr/doxygen-install@v1.4.0
      - name: Install Vulkan SDK (Prepare Vulkan SDK)
        if: matrix.os == 'ubuntu-latest'
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.304.1
        #  vulkan-components: Vulkan-Headers, Vulkan-Loader
        #  vulkan-use-cache: true

      - name: Install appimagetool (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 curl ca-certificates python3
          HOST_ARCH=$(uname -m)
          case "$HOST_ARCH" in
            x86_64|amd64) WANT='x86_64' ;;
            aarch64|arm64) WANT='aarch64' ;;
            armv7l) WANT='armv7l' ;;
            *) WANT='x86_64' ;;
          esac
          export WANT
          ASSET=$(python3 - <<'PY'
          import os,sys,json,urllib.request
          want=os.environ.get('WANT','x86_64')
          url="https://api.github.com/repos/AppImage/AppImageKit/releases/latest"
          req=urllib.request.Request(url, headers={'User-Agent':'ci'})
          with urllib.request.urlopen(req) as r:
              j=json.load(r)
          assets=j.get('assets',[])
          # 1) exact arch match
          for a in assets:
              n=a.get('name','').lower()
              if 'appimagetool' in n and want in n and n.endswith('.appimage'):
                  print(a.get('browser_download_url')); sys.exit(0)
          # 2) prefer x86_64
          for a in assets:
              n=a.get('name','').lower()
              if 'appimagetool' in n and 'x86_64' in n and n.endswith('.appimage'):
                  print(a.get('browser_download_url')); sys.exit(0)
          # 3) any appimagetool.AppImage
          for a in assets:
              n=a.get('name','').lower()
              if 'appimagetool' in n and n.endswith('.appimage'):
                  print(a.get('browser_download_url')); sys.exit(0)
          sys.exit(1)
          PY
          )
          if [ -z "$ASSET" ]; then
            echo "Asset nicht über API gefunden, versuche Legacy-URL"
            URL="https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          else
            URL="$ASSET"
          fi
          echo "Downloading $URL"
          curl -fSL -o appimagetool.AppImage "$URL" || { echo "Download fehlgeschlagen: $URL"; exit 1; }
          if file appimagetool.AppImage | grep -qi 'ELF'; then
            chmod +x appimagetool.AppImage
            sudo mv appimagetool.AppImage /usr/local/bin/appimagetool
            /usr/local/bin/appimagetool --version
          else
            echo "Fehler: Heruntergeladene Datei ist kein ELF/AppImage. Auszug:"
            head -n 50 appimagetool.AppImage
            exit 1
          fi

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        shell: pwsh
        run: |
          $bd = "${{ steps.strings.outputs.build-output-dir }}"
          cmake -B $bd `
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DBUILD_DOC:BOOL=OFF `
            -DBUILD_DOCUMENTATION:BOOL=OFF `
            -DUSE_DOXYGEN:BOOL=OFF `
            -DDOXYGEN_FOUND:BOOL=OFF `
            -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Build AppImage (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Running CMake target: appimage"
          cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --target appimage

      - name: Zip Windows bin folder
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $bd = "${{ steps.strings.outputs.build-output-dir }}"
          $bin = Join-Path $bd "bin"
          $zip = Join-Path $bd "KiCAD-FreeCAD-TechDraw-Template-Generator-windows.zip"
          if (Test-Path $bin) {
            Remove-Item -Force -ErrorAction Ignore $zip
            Compress-Archive -Path "$bin\*" -DestinationPath $zip -Force
            Write-Host "Created zip: $zip"
          } else {
            Write-Host "No bin folder found at $bin"
          }

      - name: Verify zip exists (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $zip = Join-Path "${{ steps.strings.outputs.build-output-dir }}" "KiCAD-FreeCAD-TechDraw-Template-Generator-windows.zip"
          Write-Host "Checking for: $zip"
          if (-not (Test-Path $zip)) {
            Write-Host "Zip not found. Listing build folder content:"
            Get-ChildItem -Path "${{ steps.strings.outputs.build-output-dir }}" -Recurse | Select-Object FullName,Length
            throw "ZIP file missing: $zip"
          }
          Write-Host "ZIP found: $zip"

      - name: Create Release (Windows) - create only
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        id: create_release_win
        with:
          tag_name: v2.999.999.${{ github.run_number }}-beta
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing release asset (Windows)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest'
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $repo = "${{ github.repository }}"
          $tag = "v2.999.999.${{ github.run_number }}-beta"
          $assetName = "KiCAD-FreeCAD-TechDraw-Template-Generator-windows.zip"
          Write-Host "Checking release by tag $tag in $repo"
          $release = Invoke-RestMethod -Headers @{ Authorization = "token $env:GITHUB_TOKEN"; "User-Agent" = "github-actions" } -Uri "https://api.github.com/repos/$repo/releases/tags/$tag" -ErrorAction SilentlyContinue
          if (-not $release) { Write-Host "Release not found (will be created)."; exit 0 }
          foreach ($a in $release.assets) {
            if ($a.name -eq $assetName) {
              Write-Host "Deleting existing asset: $($a.name) (id $($a.id))"
              Invoke-RestMethod -Method Delete -Headers @{ Authorization = "token $env:GITHUB_TOKEN"; "User-Agent" = "github-actions" } -Uri "https://api.github.com/repos/$repo/releases/assets/$($a.id)"
            }
          }

      - name: Upload ZIP as release asset (Windows)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_win.outputs.upload_url }}
          asset_path: ${{ steps.strings.outputs.build-output-dir }}/KiCAD-FreeCAD-TechDraw-Template-Generator-windows.zip
          asset_name: KiCAD-FreeCAD-TechDraw-Template-Generator-windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (Linux)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v2.999.999.${{ github.run_number }}-beta
          files: |
            ${{ steps.strings.outputs.build-output-dir }}/KiCAD-FreeCAD-TechDraw-Template-Generator.AppImage
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
