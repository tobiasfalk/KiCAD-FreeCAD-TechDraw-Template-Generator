# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt (Windows — MSVC 2022)
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.10.0
          arch: win64_msvc2022_64

      - name: "Diagnose: verfügbare Qt-Architekturen (Linux runner, optional)"
        if: matrix.os == 'ubuntu-latest'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install aqtinstall
          python3 -m aqt list-qt linux desktop --arch 6.10.0

      - name: Install Qt (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.10.0
          arch: gcc_64

      - name: doxygen-install
        # You may pin to the exact commit or the version.
        # uses: ssciwr/doxygen-install@8ebee91aa1d497c78f84be02a372ec7e1d240731
        uses: ssciwr/doxygen-install@v1.4.0

      - name: Install Vulkan SDK (Prepare Vulkan SDK)
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        #with:
        #  vulkan-query-version: 1.4.304.1
        #  vulkan-components: Vulkan-Headers, Vulkan-Loader
        #  vulkan-use-cache: true

      - name: Install appimagetool (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 curl
          URL="https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          echo "Downloading $URL"
          curl -fSL -o appimagetool.AppImage "$URL" || { echo "Download failed (HTTP error)"; exit 1; }
          # Prüfen, ob es ein echtes AppImage/ELF ist
          if file appimagetool.AppImage | grep -qi 'ELF'; then
            chmod +x appimagetool.AppImage
            sudo mv appimagetool.AppImage /usr/local/bin/appimagetool
            /usr/local/bin/appimagetool --version
          else
            echo "Fehler: Heruntergeladene Datei ist kein ELF/AppImage. Auszug:"
            head -n 50 appimagetool.AppImage
            exit 1
          fi

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
