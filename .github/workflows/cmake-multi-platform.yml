# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
        # You may pin to the exact commit or the version.
        # uses: jurplel/install-qt-action@b3ea5275e37b734d027040e2c7fe7a10ea2ef946
        uses: jurplel/install-qt-action@v3.3.0
        with:
          # Directory to install Qt
          dir: # optional
          # Version of Qt to install
          version: 6.6.3# optional, default is 5.15.2
          
          # Additional Qt modules to install
          modules: # optional
          # Specify which Qt archive to install
          archives: # optional
          # Whether or not to cache Qt automatically
          cache: # optional
          # Cache key prefix for automatic cache
          cache-key-prefix: # optional, default is install-qt-action
          # Whether or not to automatically run setup-python to find a valid python version.
          setup-python: # optional, default is true
          # Qt tools to download -- specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
      
          tools: # optional
          # Whether or not to set environment variables after running aqtinstall
          set-env: # optional, default is true
          # Turns off installation of Qt. Useful for installing tools, source, documentation, or examples.
          no-qt-binaries: # optional
          # Synonym for `no-qt-binaries`, used for backwards compatibility.
          tools-only: # optional
          # Version of aqtinstall to use in case of issues
          aqtversion: # optional, default is ==2.1.*
          # Version of py7zr to use in case of issues
          py7zrversion: # optional, default is ==0.19.*
          # Any extra arguments to append to the back
          extra: # optional
          # Whether or not to install Qt source code.
          source: # optional
          # Space-separated list of .7z source archives to install. Used to reduce download/image sizes.
          src-archives: # optional
          # Whether or not to install Qt documentation.
          documentation: # optional
          # Space-separated list of .7z docs archives to install. Used to reduce download/image sizes.
          doc-archives: # optional
          # Space-separated list of additional documentation modules to install.
          doc-modules: # optional
          # Whether or not to install Qt example code.
          examples: # optional
          # Space-separated list of .7z example archives to install. Used to reduce download/image sizes.
          example-archives: # optional
          # Space-separated list of additional example modules to install.
          example-modules: # optional
          

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
